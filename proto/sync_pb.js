/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Identifier', null, global);
goog.exportSymbol('proto.IdentifierInterval', null, global);
goog.exportSymbol('proto.Interval', null, global);
goog.exportSymbol('proto.LogootSAdd', null, global);
goog.exportSymbol('proto.LogootSDel', null, global);
goog.exportSymbol('proto.QuerySync', null, global);
goog.exportSymbol('proto.ReplySync', null, global);
goog.exportSymbol('proto.RichLogootSOperation', null, global);
goog.exportSymbol('proto.Sync', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Sync = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Sync.oneofGroups_);
};
goog.inherits(proto.Sync, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Sync.displayName = 'proto.Sync';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Sync.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.Sync.TypeCase = {
  TYPE_NOT_SET: 0,
  RICHLOGOOTSOP: 1,
  QUERYSYNC: 2,
  REPLYSYNC: 3
};

/**
 * @return {proto.Sync.TypeCase}
 */
proto.Sync.prototype.getTypeCase = function() {
  return /** @type {proto.Sync.TypeCase} */(jspb.Message.computeOneofCase(this, proto.Sync.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Sync.prototype.toObject = function(opt_includeInstance) {
  return proto.Sync.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Sync} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Sync.toObject = function(includeInstance, msg) {
  var f, obj = {
    richlogootsop: (f = msg.getRichlogootsop()) && proto.RichLogootSOperation.toObject(includeInstance, f),
    querysync: (f = msg.getQuerysync()) && proto.QuerySync.toObject(includeInstance, f),
    replysync: (f = msg.getReplysync()) && proto.ReplySync.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Sync}
 */
proto.Sync.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Sync;
  return proto.Sync.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Sync} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Sync}
 */
proto.Sync.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RichLogootSOperation;
      reader.readMessage(value,proto.RichLogootSOperation.deserializeBinaryFromReader);
      msg.setRichlogootsop(value);
      break;
    case 2:
      var value = new proto.QuerySync;
      reader.readMessage(value,proto.QuerySync.deserializeBinaryFromReader);
      msg.setQuerysync(value);
      break;
    case 3:
      var value = new proto.ReplySync;
      reader.readMessage(value,proto.ReplySync.deserializeBinaryFromReader);
      msg.setReplysync(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Sync} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Sync.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Sync.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Sync.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRichlogootsop();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.RichLogootSOperation.serializeBinaryToWriter
    );
  }
  f = this.getQuerysync();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.QuerySync.serializeBinaryToWriter
    );
  }
  f = this.getReplysync();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ReplySync.serializeBinaryToWriter
    );
  }
};


/**
 * optional RichLogootSOperation richLogootSOp = 1;
 * @return {?proto.RichLogootSOperation}
 */
proto.Sync.prototype.getRichlogootsop = function() {
  return /** @type{?proto.RichLogootSOperation} */ (
    jspb.Message.getWrapperField(this, proto.RichLogootSOperation, 1));
};


/** @param {?proto.RichLogootSOperation|undefined} value */
proto.Sync.prototype.setRichlogootsop = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.Sync.oneofGroups_[0], value);
};


proto.Sync.prototype.clearRichlogootsop = function() {
  this.setRichlogootsop(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Sync.prototype.hasRichlogootsop = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional QuerySync querySync = 2;
 * @return {?proto.QuerySync}
 */
proto.Sync.prototype.getQuerysync = function() {
  return /** @type{?proto.QuerySync} */ (
    jspb.Message.getWrapperField(this, proto.QuerySync, 2));
};


/** @param {?proto.QuerySync|undefined} value */
proto.Sync.prototype.setQuerysync = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.Sync.oneofGroups_[0], value);
};


proto.Sync.prototype.clearQuerysync = function() {
  this.setQuerysync(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Sync.prototype.hasQuerysync = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ReplySync replySync = 3;
 * @return {?proto.ReplySync}
 */
proto.Sync.prototype.getReplysync = function() {
  return /** @type{?proto.ReplySync} */ (
    jspb.Message.getWrapperField(this, proto.ReplySync, 3));
};


/** @param {?proto.ReplySync|undefined} value */
proto.Sync.prototype.setReplysync = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.Sync.oneofGroups_[0], value);
};


proto.Sync.prototype.clearReplysync = function() {
  this.setReplysync(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Sync.prototype.hasReplysync = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RichLogootSOperation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.RichLogootSOperation.oneofGroups_);
};
goog.inherits(proto.RichLogootSOperation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RichLogootSOperation.displayName = 'proto.RichLogootSOperation';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.RichLogootSOperation.oneofGroups_ = [[3,4]];

/**
 * @enum {number}
 */
proto.RichLogootSOperation.TypeCase = {
  TYPE_NOT_SET: 0,
  LOGOOTSADD: 3,
  LOGOOTSDEL: 4
};

/**
 * @return {proto.RichLogootSOperation.TypeCase}
 */
proto.RichLogootSOperation.prototype.getTypeCase = function() {
  return /** @type {proto.RichLogootSOperation.TypeCase} */(jspb.Message.computeOneofCase(this, proto.RichLogootSOperation.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RichLogootSOperation.prototype.toObject = function(opt_includeInstance) {
  return proto.RichLogootSOperation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RichLogootSOperation} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RichLogootSOperation.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clock: jspb.Message.getFieldWithDefault(msg, 2, 0),
    logootsadd: (f = msg.getLogootsadd()) && proto.LogootSAdd.toObject(includeInstance, f),
    logootsdel: (f = msg.getLogootsdel()) && proto.LogootSDel.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RichLogootSOperation}
 */
proto.RichLogootSOperation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RichLogootSOperation;
  return proto.RichLogootSOperation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RichLogootSOperation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RichLogootSOperation}
 */
proto.RichLogootSOperation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setClock(value);
      break;
    case 3:
      var value = new proto.LogootSAdd;
      reader.readMessage(value,proto.LogootSAdd.deserializeBinaryFromReader);
      msg.setLogootsadd(value);
      break;
    case 4:
      var value = new proto.LogootSDel;
      reader.readMessage(value,proto.LogootSDel.deserializeBinaryFromReader);
      msg.setLogootsdel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.RichLogootSOperation} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RichLogootSOperation.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RichLogootSOperation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.RichLogootSOperation.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getClock();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getLogootsadd();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.LogootSAdd.serializeBinaryToWriter
    );
  }
  f = this.getLogootsdel();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.LogootSDel.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.RichLogootSOperation.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.RichLogootSOperation.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 clock = 2;
 * @return {number}
 */
proto.RichLogootSOperation.prototype.getClock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.RichLogootSOperation.prototype.setClock = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional LogootSAdd logootSAdd = 3;
 * @return {?proto.LogootSAdd}
 */
proto.RichLogootSOperation.prototype.getLogootsadd = function() {
  return /** @type{?proto.LogootSAdd} */ (
    jspb.Message.getWrapperField(this, proto.LogootSAdd, 3));
};


/** @param {?proto.LogootSAdd|undefined} value */
proto.RichLogootSOperation.prototype.setLogootsadd = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.RichLogootSOperation.oneofGroups_[0], value);
};


proto.RichLogootSOperation.prototype.clearLogootsadd = function() {
  this.setLogootsadd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RichLogootSOperation.prototype.hasLogootsadd = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional LogootSDel logootSDel = 4;
 * @return {?proto.LogootSDel}
 */
proto.RichLogootSOperation.prototype.getLogootsdel = function() {
  return /** @type{?proto.LogootSDel} */ (
    jspb.Message.getWrapperField(this, proto.LogootSDel, 4));
};


/** @param {?proto.LogootSDel|undefined} value */
proto.RichLogootSOperation.prototype.setLogootsdel = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.RichLogootSOperation.oneofGroups_[0], value);
};


proto.RichLogootSOperation.prototype.clearLogootsdel = function() {
  this.setLogootsdel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RichLogootSOperation.prototype.hasLogootsdel = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LogootSAdd = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LogootSAdd, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LogootSAdd.displayName = 'proto.LogootSAdd';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LogootSAdd.prototype.toObject = function(opt_includeInstance) {
  return proto.LogootSAdd.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LogootSAdd} msg The msg instance to transform.
 * @return {!Object}
 */
proto.LogootSAdd.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.Identifier.toObject(includeInstance, f),
    content: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LogootSAdd}
 */
proto.LogootSAdd.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LogootSAdd;
  return proto.LogootSAdd.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LogootSAdd} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LogootSAdd}
 */
proto.LogootSAdd.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Identifier;
      reader.readMessage(value,proto.Identifier.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.LogootSAdd} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.LogootSAdd.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LogootSAdd.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.LogootSAdd.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Identifier.serializeBinaryToWriter
    );
  }
  f = this.getContent();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Identifier id = 1;
 * @return {?proto.Identifier}
 */
proto.LogootSAdd.prototype.getId = function() {
  return /** @type{?proto.Identifier} */ (
    jspb.Message.getWrapperField(this, proto.Identifier, 1));
};


/** @param {?proto.Identifier|undefined} value */
proto.LogootSAdd.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.LogootSAdd.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LogootSAdd.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string content = 2;
 * @return {string}
 */
proto.LogootSAdd.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.LogootSAdd.prototype.setContent = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Identifier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Identifier.repeatedFields_, null);
};
goog.inherits(proto.Identifier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Identifier.displayName = 'proto.Identifier';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Identifier.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Identifier.prototype.toObject = function(opt_includeInstance) {
  return proto.Identifier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Identifier} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Identifier.toObject = function(includeInstance, msg) {
  var f, obj = {
    baseList: jspb.Message.getField(msg, 1),
    last: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Identifier}
 */
proto.Identifier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Identifier;
  return proto.Identifier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Identifier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Identifier}
 */
proto.Identifier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt32());
      msg.setBaseList(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLast(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Identifier} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Identifier.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Identifier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Identifier.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getBaseList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
  f = this.getLast();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated int32 base = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.Identifier.prototype.getBaseList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 1));
};


/** @param {!Array.<number>} value */
proto.Identifier.prototype.setBaseList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.Identifier.prototype.addBase = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.Identifier.prototype.clearBaseList = function() {
  this.setBaseList([]);
};


/**
 * optional int32 last = 2;
 * @return {number}
 */
proto.Identifier.prototype.getLast = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Identifier.prototype.setLast = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LogootSDel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.LogootSDel.repeatedFields_, null);
};
goog.inherits(proto.LogootSDel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LogootSDel.displayName = 'proto.LogootSDel';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.LogootSDel.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LogootSDel.prototype.toObject = function(opt_includeInstance) {
  return proto.LogootSDel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LogootSDel} msg The msg instance to transform.
 * @return {!Object}
 */
proto.LogootSDel.toObject = function(includeInstance, msg) {
  var f, obj = {
    lidList: jspb.Message.toObjectList(msg.getLidList(),
    proto.IdentifierInterval.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LogootSDel}
 */
proto.LogootSDel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LogootSDel;
  return proto.LogootSDel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LogootSDel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LogootSDel}
 */
proto.LogootSDel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.IdentifierInterval;
      reader.readMessage(value,proto.IdentifierInterval.deserializeBinaryFromReader);
      msg.addLid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.LogootSDel} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.LogootSDel.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LogootSDel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.LogootSDel.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getLidList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.IdentifierInterval.serializeBinaryToWriter
    );
  }
};


/**
 * repeated IdentifierInterval lid = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.IdentifierInterval>}
 */
proto.LogootSDel.prototype.getLidList = function() {
  return /** @type{!Array.<!proto.IdentifierInterval>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.IdentifierInterval, 1));
};


/** @param {!Array.<!proto.IdentifierInterval>} value */
proto.LogootSDel.prototype.setLidList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.IdentifierInterval=} opt_value
 * @param {number=} opt_index
 * @return {!proto.IdentifierInterval}
 */
proto.LogootSDel.prototype.addLid = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.IdentifierInterval, opt_index);
};


proto.LogootSDel.prototype.clearLidList = function() {
  this.setLidList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IdentifierInterval = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IdentifierInterval.repeatedFields_, null);
};
goog.inherits(proto.IdentifierInterval, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IdentifierInterval.displayName = 'proto.IdentifierInterval';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IdentifierInterval.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IdentifierInterval.prototype.toObject = function(opt_includeInstance) {
  return proto.IdentifierInterval.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IdentifierInterval} msg The msg instance to transform.
 * @return {!Object}
 */
proto.IdentifierInterval.toObject = function(includeInstance, msg) {
  var f, obj = {
    baseList: jspb.Message.getField(msg, 1),
    begin: jspb.Message.getFieldWithDefault(msg, 2, 0),
    end: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IdentifierInterval}
 */
proto.IdentifierInterval.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IdentifierInterval;
  return proto.IdentifierInterval.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IdentifierInterval} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IdentifierInterval}
 */
proto.IdentifierInterval.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt32());
      msg.setBaseList(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBegin(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.IdentifierInterval} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.IdentifierInterval.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IdentifierInterval.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.IdentifierInterval.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getBaseList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
  f = this.getBegin();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getEnd();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * repeated int32 base = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.IdentifierInterval.prototype.getBaseList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 1));
};


/** @param {!Array.<number>} value */
proto.IdentifierInterval.prototype.setBaseList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.IdentifierInterval.prototype.addBase = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.IdentifierInterval.prototype.clearBaseList = function() {
  this.setBaseList([]);
};


/**
 * optional int32 begin = 2;
 * @return {number}
 */
proto.IdentifierInterval.prototype.getBegin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IdentifierInterval.prototype.setBegin = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 end = 3;
 * @return {number}
 */
proto.IdentifierInterval.prototype.getEnd = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.IdentifierInterval.prototype.setEnd = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.QuerySync = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.QuerySync, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.QuerySync.displayName = 'proto.QuerySync';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.QuerySync.prototype.toObject = function(opt_includeInstance) {
  return proto.QuerySync.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.QuerySync} msg The msg instance to transform.
 * @return {!Object}
 */
proto.QuerySync.toObject = function(includeInstance, msg) {
  var f, obj = {
    vectorMap: (f = msg.getVectorMap()) ? f.toArray() : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.QuerySync}
 */
proto.QuerySync.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.QuerySync;
  return proto.QuerySync.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.QuerySync} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.QuerySync}
 */
proto.QuerySync.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getVectorMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readInt32);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.QuerySync} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.QuerySync.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.QuerySync.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.QuerySync.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getVectorMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeInt32);
  }
};


/**
 * map<int32, int32> vector = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.QuerySync.prototype.getVectorMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


proto.QuerySync.prototype.clearVectorMap = function() {
  this.getVectorMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ReplySync = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ReplySync.repeatedFields_, null);
};
goog.inherits(proto.ReplySync, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ReplySync.displayName = 'proto.ReplySync';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ReplySync.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ReplySync.prototype.toObject = function(opt_includeInstance) {
  return proto.ReplySync.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ReplySync} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ReplySync.toObject = function(includeInstance, msg) {
  var f, obj = {
    richlogootsopsList: jspb.Message.toObjectList(msg.getRichlogootsopsList(),
    proto.RichLogootSOperation.toObject, includeInstance),
    intervalsList: jspb.Message.toObjectList(msg.getIntervalsList(),
    proto.Interval.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ReplySync}
 */
proto.ReplySync.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ReplySync;
  return proto.ReplySync.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ReplySync} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ReplySync}
 */
proto.ReplySync.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RichLogootSOperation;
      reader.readMessage(value,proto.RichLogootSOperation.deserializeBinaryFromReader);
      msg.addRichlogootsops(value);
      break;
    case 2:
      var value = new proto.Interval;
      reader.readMessage(value,proto.Interval.deserializeBinaryFromReader);
      msg.addIntervals(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.ReplySync} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ReplySync.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ReplySync.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.ReplySync.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRichlogootsopsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.RichLogootSOperation.serializeBinaryToWriter
    );
  }
  f = this.getIntervalsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Interval.serializeBinaryToWriter
    );
  }
};


/**
 * repeated RichLogootSOperation richLogootSOps = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.RichLogootSOperation>}
 */
proto.ReplySync.prototype.getRichlogootsopsList = function() {
  return /** @type{!Array.<!proto.RichLogootSOperation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.RichLogootSOperation, 1));
};


/** @param {!Array.<!proto.RichLogootSOperation>} value */
proto.ReplySync.prototype.setRichlogootsopsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.RichLogootSOperation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.RichLogootSOperation}
 */
proto.ReplySync.prototype.addRichlogootsops = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.RichLogootSOperation, opt_index);
};


proto.ReplySync.prototype.clearRichlogootsopsList = function() {
  this.setRichlogootsopsList([]);
};


/**
 * repeated Interval intervals = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Interval>}
 */
proto.ReplySync.prototype.getIntervalsList = function() {
  return /** @type{!Array.<!proto.Interval>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Interval, 2));
};


/** @param {!Array.<!proto.Interval>} value */
proto.ReplySync.prototype.setIntervalsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Interval=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Interval}
 */
proto.ReplySync.prototype.addIntervals = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Interval, opt_index);
};


proto.ReplySync.prototype.clearIntervalsList = function() {
  this.setIntervalsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Interval = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Interval, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Interval.displayName = 'proto.Interval';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Interval.prototype.toObject = function(opt_includeInstance) {
  return proto.Interval.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Interval} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Interval.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    begin: jspb.Message.getFieldWithDefault(msg, 2, 0),
    end: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Interval}
 */
proto.Interval.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Interval;
  return proto.Interval.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Interval} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Interval}
 */
proto.Interval.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBegin(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Interval} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Interval.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Interval.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Interval.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getBegin();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getEnd();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.Interval.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Interval.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 begin = 2;
 * @return {number}
 */
proto.Interval.prototype.getBegin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Interval.prototype.setBegin = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 end = 3;
 * @return {number}
 */
proto.Interval.prototype.getEnd = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Interval.prototype.setEnd = function(value) {
  jspb.Message.setField(this, 3, value);
};


goog.object.extend(exports, proto);
